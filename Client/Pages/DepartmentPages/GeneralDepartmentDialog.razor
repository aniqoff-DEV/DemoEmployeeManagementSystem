@inject IDialogService DialogService
@implements IDialogContentComponent<GeneralDepartmentDialog>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentLabel Typo="Typography.PaneHeader">
            Add Department
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <EditForm Model="Department" Enhance OnSubmit="Save">
        <div class="card border-success">
            <div class="form-group">
                <label class="form-label">Name</label>
                <InputText @bind-Value="Department.Name" class="form-control" />
            </div>
        </div>
    </EditForm>
 </FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit"
                  Disabled="@(!_editContext.Validate())"
                  OnClick="@Save">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@CancelAsync">
        Cancel
    </FluentButton>
</FluentDialogFooter>

@code {
    [Parameter]
    public GeneralDepartmentDTO Department { get; set; } = new();

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public GeneralDepartmentDialog Content { get; set; } = default!;

    private EditContext _editContext = default!;

    private async void Save()
    {
        if (string.IsNullOrEmpty(Department.Name))
            await DialogService.ShowErrorAsync("You need to private Department name.");
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}
